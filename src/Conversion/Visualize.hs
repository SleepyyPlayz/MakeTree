module Conversion.Visualize (getDepTreeString) where

import Data.List (intercalate)

import Conversion.TargetForestGeneration (TargetTree(..))


-- | Generates a multi-line string that visualizes a target forest, given
-- a target forest of a Makefile that is generated by getTargetForest in 
-- TargetForestGeneration.
getDepTreeString :: [TargetTree] -> String
getDepTreeString trees = 
    let 
        -- List of all lists of strings (lines) returned by generateDepString,
        -- for each of the trees: [[String]]
        allTreeLines = [generateDepTreeString tree | tree <- trees]
        
        -- Now '\n' separates each line in each tree: [String]
        allTreeStrings = map (intercalate "\n") allTreeLines
    in
    intercalate "\n\n" allTreeStrings

-- | Recursive helper function for getDepTreeString. Generates a multi-line
-- string in the form of a list of strings (WITHOUT ending '\n' characters) 
-- to represent ONE SINGLE TargetTree.
generateDepTreeString :: TargetTree -> [String]
generateDepTreeString (TargetNode name deps) = 
    let
        -- List of all the string lists returned by the child trees:
        depResults = [generateDepTreeString dep | dep <- deps]  -- [[String]]

        -- For all lines in depResults, indicates the first line of each result:
        -- (this determines whether it's the )
        isFirstLine = map isFirstElementList depResults  -- [[Bool]]

        -- List indicating the final dependency, with the # of output lines for 
        -- said dependency: [(Bool, Int)]
        depFlagsWithLengths = zip (isFinalElementList depResults) (map length depResults)

        -- For all lines in depResults, indicates whether each output line belongs the final dependency:
        isFinalDep = map (\(flag, num) -> replicate num flag) depFlagsWithLengths  -- [[Bool]]

        -- Non-nested list of all lines in depResults, zipped with their flags respectively:
        -- [(String, Bool, Bool)]
        allLinesWithFlags = zip3 (concat depResults) (concat isFirstLine) (concat isFinalDep)
    in
    name : [prefixString flag1 flag2 ++ line | (line, flag1, flag2) <- allLinesWithFlags]

-- | Helper function to generateDepTreeString, returns the prefix string given
-- two boolean conditions:
--     1. whether the line is the first line of a subtree's output
--     2. whether the line is part of the final subtree's output
prefixString :: Bool -> Bool -> String  -- isFirstLine -> isFinalDep -> String
prefixString True False = "├── "
prefixString False False = "│   "
prefixString True True = "└── "
prefixString False True = "    "

-- | Helper function to generateDepTreeString, given a list, returns a list
-- of booleans that indicate whether the corresponding element is the first
-- element of the list.
-- Returns [] when given an empty list.
isFirstElementList :: [a] -> [Bool]
isFirstElementList [] = []
isFirstElementList (_ : xs) = True : replicate (length xs) False

-- | Helper function to generateDepTreeString, given a list, returns a list
-- of booleans that indicate whether the corresponding element is the final
-- element of the list.
-- Returns [] when given an empty list.
isFinalElementList :: [a] -> [Bool]
isFinalElementList [] = []
isFinalElementList [_] = [True]
isFinalElementList (_ : xs) = False : isFinalElementList xs
